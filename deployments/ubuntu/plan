random_id.random: Refreshing state... [id=tUoZXILlT-rBBAqAuh8BPauIXvY]
module.runners.random_string.random: Refreshing state... [id=4v8yu2m4n4124e2w79n5xma0]
module.runners.module.ssm.aws_ssm_parameter.github_app_id: Refreshing state... [id=/github-action-runners/Proj/app/github_app_id]
module.runners.module.ssm.aws_ssm_parameter.github_app_key_base64: Refreshing state... [id=/github-action-runners/Proj/app/github_app_key_base64]
module.runners.module.ssm.aws_ssm_parameter.github_app_webhook_secret: Refreshing state... [id=/github-action-runners/Proj/app/github_app_webhook_secret]
module.runners.module.runner_binaries[0].data.aws_caller_identity.current: Reading...
module.runners.module.runner_binaries[0].aws_s3_bucket.action_dist: Refreshing state... [id=dist-4v8yu2m4n4124e2w79n5xma0]
module.runners.module.runners.data.aws_ami.runner: Reading...
module.runners.module.webhook.data.aws_iam_policy_document.lambda_assume_role_policy: Reading...
module.runners.module.runners.aws_cloudwatch_event_rule.scale_down: Refreshing state... [id=Proj-scale-down-rule]
module.runners.module.runners.data.aws_caller_identity.current: Reading...
module.runners.module.webhook.aws_apigatewayv2_api.webhook: Refreshing state... [id=donq2nufe4]
module.runners.module.webhook.data.aws_iam_policy_document.lambda_assume_role_policy: Read complete after 0s [id=3693445097]
module.base.aws_resourcegroups_group.resourcegroups_group: Refreshing state... [id=Proj-group]
module.runners.module.runners.aws_ssm_parameter.token_path: Refreshing state... [id=/github-action-runners/Proj/runners/config/token_path]
module.runners.module.runners.aws_cloudwatch_log_group.gh_runners[2]: Refreshing state... [id=/github-self-hosted-runners/Proj/runner]
module.runners.module.runners.data.aws_iam_policy_document.lambda_assume_role_policy: Reading...
module.runners.module.runners.aws_cloudwatch_log_group.gh_runners[0]: Refreshing state... [id=/github-self-hosted-runners/Proj/syslog]
module.runners.module.runners.aws_cloudwatch_log_group.gh_runners[1]: Refreshing state... [id=/github-self-hosted-runners/Proj/user_data]
module.runners.module.runners.data.aws_iam_policy_document.lambda_assume_role_policy: Read complete after 0s [id=3693445097]
module.runners.module.runner_binaries[0].aws_cloudwatch_event_rule.syncer: Refreshing state... [id=Proj-syncer-rule]
module.runners.data.aws_iam_policy_document.deny_unsecure_transport: Reading...
module.runners.data.aws_iam_policy_document.deny_unsecure_transport: Read complete after 0s [id=4070628872]
module.runners.aws_sqs_queue.queued_builds: Refreshing state... [id=https://sqs.eu-west-1.amazonaws.com/287871436243/Proj-queued-builds]
module.runners.module.runners.data.aws_ami.runner: Read complete after 1s [id=ami-09b0d7d31ba756f46]
module.runners.module.runners.aws_ssm_parameter.cloudwatch_agent_config_runner[0]: Refreshing state... [id=/github-action-runners/Proj/runners/config/cloudwatch_agent_config_runner]
module.runners.module.runner_binaries[0].data.aws_caller_identity.current: Read complete after 1s [id=287871436243]
module.runners.module.runners.aws_ssm_parameter.runner_agent_mode: Refreshing state... [id=/github-action-runners/Proj/runners/config/agent_mode]
module.runners.module.runner_binaries[0].data.aws_iam_policy_document.lambda_assume_role_policy: Reading...
module.runners.module.runner_binaries[0].data.aws_iam_policy_document.lambda_assume_role_policy: Read complete after 0s [id=3693445097]
module.runners.module.runners.aws_ssm_parameter.runner_config_run_as: Refreshing state... [id=/github-action-runners/Proj/runners/config/run_as]
module.runners.module.runners.data.aws_caller_identity.current: Read complete after 1s [id=287871436243]
module.runners.module.runners.aws_ssm_parameter.runner_enable_cloudwatch: Refreshing state... [id=/github-action-runners/Proj/runners/config/enable_cloudwatch]
module.runners.module.webhook.aws_apigatewayv2_stage.webhook: Refreshing state... [id=$default]
module.runners.aws_sqs_queue_policy.build_queue_policy: Refreshing state... [id=https://sqs.eu-west-1.amazonaws.com/287871436243/Proj-queued-builds]
module.runners.module.runner_binaries[0].aws_s3_bucket_public_access_block.action_dist: Refreshing state... [id=dist-4v8yu2m4n4124e2w79n5xma0]
module.runners.module.runner_binaries[0].aws_s3_bucket_server_side_encryption_configuration.action_dist[0]: Refreshing state... [id=dist-4v8yu2m4n4124e2w79n5xma0]
module.runners.module.runner_binaries[0].data.aws_iam_policy_document.action_dist_sse_policy[0]: Reading...
module.runners.module.runner_binaries[0].aws_s3_bucket_lifecycle_configuration.bucket-config: Refreshing state... [id=dist-4v8yu2m4n4124e2w79n5xma0]
module.runners.module.runner_binaries[0].data.aws_iam_policy_document.action_dist_sse_policy[0]: Read complete after 0s [id=2881279850]
module.runners.module.runner_binaries[0].aws_s3_bucket_policy.action_dist_sse_policy[0]: Refreshing state... [id=dist-4v8yu2m4n4124e2w79n5xma0]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the
last "terraform apply" which may have affected this plan:

  # module.runners.aws_sqs_queue.queued_builds has changed
  ~ resource "aws_sqs_queue" "queued_builds" {
        id                                = "https://sqs.eu-west-1.amazonaws.com/287871436243/Proj-queued-builds"
        name                              = "Proj-queued-builds"
      + policy                            = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sqs:*"
                      + Condition = {
                          + Bool = {
                              + "aws:SecureTransport" = "false"
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = "*"
                      + Sid       = "DenyUnsecureTransport"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
        tags                              = {
            "Project" = "ProjectX"
        }
        # (12 unchanged attributes hidden)
    }

  # module.runners.module.runner_binaries[0].aws_s3_bucket.action_dist has changed
  ~ resource "aws_s3_bucket" "action_dist" {
        id                          = "dist-4v8yu2m4n4124e2w79n5xma0"
      + policy                      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "s3:PutObject"
                      + Condition = {
                          + StringNotEquals = {
                              + "s3:x-amz-server-side-encryption" = "AES256"
                            }
                        }
                      + Effect    = "Deny"
                      + Principal = {
                          + AWS = "*"
                        }
                      + Resource  = "arn:aws:s3:::dist-4v8yu2m4n4124e2w79n5xma0/*"
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
        tags                        = {
            "Project"         = "ProjectX"
            "ghr:environment" = "Proj"
        }
        # (10 unchanged attributes hidden)

      + lifecycle_rule {
          + abort_incomplete_multipart_upload_days = 7
          + enabled                                = true
          + id                                     = "lifecycle_config"
          + tags                                   = {}

          + transition {
              + days          = 35
              + storage_class = "INTELLIGENT_TIERING"
            }
        }

        # (3 unchanged blocks hidden)
    }


Unless you have made equivalent changes to your configuration, or ignored the
relevant attributes using ignore_changes, the following plan may include
actions to undo or respond to these changes.

─────────────────────────────────────────────────────────────────────────────

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.runners.module.runner_binaries[0].aws_cloudwatch_event_target.syncer will be created
  + resource "aws_cloudwatch_event_target" "syncer" {
      + arn            = (known after apply)
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "Proj-syncer-rule"
      + target_id      = (known after apply)
    }

  # module.runners.module.runner_binaries[0].aws_cloudwatch_log_group.syncer will be created
  + resource "aws_cloudwatch_log_group" "syncer" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/aws/lambda/Proj-syncer"
      + name_prefix       = (known after apply)
      + retention_in_days = 180
      + skip_destroy      = false
      + tags              = {
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + tags_all          = {
          + "Example"         = "ubuntu"
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
    }

  # module.runners.module.runner_binaries[0].aws_iam_role.syncer_lambda will be created
  + resource "aws_iam_role" "syncer_lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "Proj-action-syncer-lambda-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + permissions_boundary  = "arn:aws:iam::287871436243:policy/ProjAdminsPermBoundaryv2"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + tags_all              = {
          + "Example"         = "ubuntu"
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + unique_id             = (known after apply)
    }

  # module.runners.module.runner_binaries[0].aws_iam_role_policy.lambda_logging will be created
  + resource "aws_iam_role_policy" "lambda_logging" {
      + id     = (known after apply)
      + name   = "Proj-lambda-logging-policy-syncer"
      + policy = (known after apply)
      + role   = (known after apply)
    }

  # module.runners.module.runner_binaries[0].aws_iam_role_policy.syncer will be created
  + resource "aws_iam_role_policy" "syncer" {
      + id     = (known after apply)
      + name   = "Proj-lambda-syncer-s3-policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:GetObjectTagging",
                          + "s3:GetObjectVersionTagging",
                          + "s3:PutObject",
                          + "s3:PutObjectTagging",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::dist-4v8yu2m4n4124e2w79n5xma0/actions-runner-linux.tar.gz",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = (known after apply)
    }

  # module.runners.module.runner_binaries[0].aws_lambda_function.syncer will be created
  + resource "aws_lambda_function" "syncer" {
      + architectures                  = [
          + "arm64",
        ]
      + arn                            = (known after apply)
      + filename                       = "lambdas/runner-binaries-syncer.zip"
      + function_name                  = "Proj-syncer"
      + handler                        = "index.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 256
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "nodejs18.x"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "vvUgvzmmt2MW3GjYidaM3iDl49lAanFtfvQU8Jb5OzA="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + tags_all                       = {
          + "Example"         = "ubuntu"
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + timeout                        = 300
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "ENVIRONMENT"                 = "Proj"
              + "GITHUB_RUNNER_ARCHITECTURE"  = "x64"
              + "GITHUB_RUNNER_OS"            = "linux"
              + "LOG_LEVEL"                   = "info"
              + "POWERTOOLS_LOGGER_LOG_EVENT" = "false"
              + "S3_BUCKET_NAME"              = "dist-4v8yu2m4n4124e2w79n5xma0"
              + "S3_OBJECT_KEY"               = "actions-runner-linux.tar.gz"
              + "S3_SSE_ALGORITHM"            = "AES256"
            }
        }

      + vpc_config {
          + vpc_id = (known after apply)
        }
    }

  # module.runners.module.runner_binaries[0].aws_lambda_permission.on_deploy will be created
  + resource "aws_lambda_permission" "on_deploy" {
      + action              = "lambda:InvokeFunction"
      + function_name       = (known after apply)
      + id                  = (known after apply)
      + principal           = "s3.amazonaws.com"
      + source_account      = "287871436243"
      + source_arn          = "arn:aws:s3:::dist-4v8yu2m4n4124e2w79n5xma0"
      + statement_id        = "AllowExecutionFromS3Bucket"
      + statement_id_prefix = (known after apply)
    }

  # module.runners.module.runner_binaries[0].aws_lambda_permission.syncer will be created
  + resource "aws_lambda_permission" "syncer" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "Proj-syncer"
      + id                  = (known after apply)
      + principal           = "events.amazonaws.com"
      + source_arn          = "arn:aws:events:eu-west-1:287871436243:rule/Proj-syncer-rule"
      + statement_id        = "AllowExecutionFromCloudWatch"
      + statement_id_prefix = (known after apply)
    }

  # module.runners.module.runner_binaries[0].aws_s3_bucket_notification.on_deploy will be created
  + resource "aws_s3_bucket_notification" "on_deploy" {
      + bucket      = "dist-4v8yu2m4n4124e2w79n5xma0"
      + eventbridge = false
      + id          = (known after apply)

      + lambda_function {
          + events              = [
              + "s3:ObjectCreated:*",
            ]
          + filter_prefix       = "triggers/"
          + filter_suffix       = ".json"
          + id                  = (known after apply)
          + lambda_function_arn = (known after apply)
        }
    }

  # module.runners.module.runner_binaries[0].aws_s3_object.trigger will be created
  + resource "aws_s3_object" "trigger" {
      + acl                    = "private"
      + bucket                 = "dist-4v8yu2m4n4124e2w79n5xma0"
      + bucket_key_enabled     = (known after apply)
      + content_type           = (known after apply)
      + etag                   = "20355efabaae9ed4d51fbc5a68eb4ce3"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = (known after apply)
      + kms_key_id             = (known after apply)
      + server_side_encryption = "AES256"
      + source                 = "../../modules/runner-binaries-syncer/trigger.json"
      + storage_class          = (known after apply)
      + tags_all               = {
          + "Example" = "ubuntu"
        }
      + version_id             = (known after apply)
    }

  # module.runners.module.runners.aws_cloudwatch_event_target.scale_down will be created
  + resource "aws_cloudwatch_event_target" "scale_down" {
      + arn            = (known after apply)
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "Proj-scale-down-rule"
      + target_id      = (known after apply)
    }

  # module.runners.module.runners.aws_cloudwatch_log_group.scale_down will be created
  + resource "aws_cloudwatch_log_group" "scale_down" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/aws/lambda/Proj-scale-down"
      + name_prefix       = (known after apply)
      + retention_in_days = 180
      + skip_destroy      = false
      + tags              = {
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + tags_all          = {
          + "Example"         = "ubuntu"
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
    }

  # module.runners.module.runners.aws_cloudwatch_log_group.scale_up will be created
  + resource "aws_cloudwatch_log_group" "scale_up" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/aws/lambda/Proj-scale-up"
      + name_prefix       = (known after apply)
      + retention_in_days = 180
      + skip_destroy      = false
      + tags              = {
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + tags_all          = {
          + "Example"         = "ubuntu"
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
    }

  # module.runners.module.runners.aws_iam_instance_profile.runner will be created
  + resource "aws_iam_instance_profile" "runner" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "Proj-runner-profile"
      + name_prefix = (known after apply)
      + path        = "/Proj/"
      + role        = "Proj-runner-role"
      + tags_all    = {
          + "Example" = "ubuntu"
        }
      + unique_id   = (known after apply)
    }

  # module.runners.module.runners.aws_iam_role.runner will be created
  + resource "aws_iam_role" "runner" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "Proj-runner-role"
      + name_prefix           = (known after apply)
      + path                  = "/Proj/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + tags_all              = {
          + "Example"             = "ubuntu"
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + unique_id             = (known after apply)
    }

  # module.runners.module.runners.aws_iam_role.scale_down will be created
  + resource "aws_iam_role" "scale_down" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "Proj-action-scale-down-lambda-role"
      + name_prefix           = (known after apply)
      + path                  = "/Proj/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + tags_all              = {
          + "Example"             = "ubuntu"
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + unique_id             = (known after apply)
    }

  # module.runners.module.runners.aws_iam_role.scale_up will be created
  + resource "aws_iam_role" "scale_up" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "Proj-action-scale-up-lambda-role"
      + name_prefix           = (known after apply)
      + path                  = "/Proj/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + tags_all              = {
          + "Example"             = "ubuntu"
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + unique_id             = (known after apply)
    }

  # module.runners.module.runners.aws_iam_role_policy.cloudwatch[0] will be created
  + resource "aws_iam_role_policy" "cloudwatch" {
      + id     = (known after apply)
      + name   = "CloudWatchLogginAndMetrics"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "cloudwatch:PutMetricData",
                          + "ec2:DescribeVolumes",
                          + "ec2:DescribeTags",
                          + "logs:PutLogEvents",
                          + "logs:DescribeLogStreams",
                          + "logs:DescribeLogGroups",
                          + "logs:CreateLogStream",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "ssm:GetParameter",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:ssm:eu-west-1:287871436243:parameter/github-action-runners/Proj/runners/config/cloudwatch_agent_config_runner/*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-runner-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.describe_tags will be created
  + resource "aws_iam_role_policy" "describe_tags" {
      + id     = (known after apply)
      + name   = "runner-describe-tags"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "ec2:DescribeTags"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-runner-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.dist_bucket[0] will be created
  + resource "aws_iam_role_policy" "dist_bucket" {
      + id     = (known after apply)
      + name   = "distribution-bucket"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:GetObject",
                          + "s3:GetObjectAcl",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::dist-4v8yu2m4n4124e2w79n5xma0/actions-runner-linux.tar.gz",
                        ]
                      + Sid      = "githubActionDist"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-runner-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.ec2 will be created
  + resource "aws_iam_role_policy" "ec2" {
      + id     = (known after apply)
      + name   = "ec2"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "ec2:TerminateInstances"
                      + Condition = {
                          + StringEquals = {
                              + "aws:ARN" = "${ec2:SourceInstanceARN}"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-runner-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.runner_session_manager_aws_managed[0] will be created
  + resource "aws_iam_role_policy" "runner_session_manager_aws_managed" {
      + id     = (known after apply)
      + name   = "runner-ssm-session"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ssm:DescribeAssociation",
                          + "ssm:GetDeployablePatchSnapshotForInstance",
                          + "ssm:GetDocument",
                          + "ssm:DescribeDocument",
                          + "ssm:GetManifest",
                          + "ssm:ListAssociations",
                          + "ssm:ListInstanceAssociations",
                          + "ssm:PutInventory",
                          + "ssm:PutComplianceItems",
                          + "ssm:PutConfigurePackageResult",
                          + "ssm:UpdateAssociationStatus",
                          + "ssm:UpdateInstanceAssociationStatus",
                          + "ssm:UpdateInstanceInformation",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "ssmmessages:CreateControlChannel",
                          + "ssmmessages:CreateDataChannel",
                          + "ssmmessages:OpenControlChannel",
                          + "ssmmessages:OpenDataChannel",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "ec2messages:AcknowledgeMessage",
                          + "ec2messages:DeleteMessage",
                          + "ec2messages:FailMessage",
                          + "ec2messages:GetEndpoint",
                          + "ec2messages:GetMessages",
                          + "ec2messages:SendReply",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-runner-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.scale_down will be created
  + resource "aws_iam_role_policy" "scale_down" {
      + id     = (known after apply)
      + name   = "Proj-lambda-scale-down-policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ec2:DescribeInstances",
                          + "ec2:DescribeTags",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "*",
                        ]
                    },
                  + {
                      + Action    = [
                          + "ec2:TerminateInstances",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "ec2:ResourceTag/ghr:Application" = "github-action-runner"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = [
                          + "*",
                        ]
                    },
                  + {
                      + Action    = [
                          + "ec2:TerminateInstances",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "ec2:ResourceTag/Application" = "github-action-runner"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = [
                          + "*",
                        ]
                    },
                  + {
                      + Action   = [
                          + "ssm:GetParameter",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:ssm:eu-west-1:287871436243:parameter/github-action-runners/Proj/app/github_app_key_base64",
                          + "arn:aws:ssm:eu-west-1:287871436243:parameter/github-action-runners/Proj/app/github_app_id",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-action-scale-down-lambda-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.scale_down_logging will be created
  + resource "aws_iam_role_policy" "scale_down_logging" {
      + id     = (known after apply)
      + name   = "Proj-lambda-logging"
      + policy = (known after apply)
      + role   = "Proj-action-scale-down-lambda-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.scale_up will be created
  + resource "aws_iam_role_policy" "scale_up" {
      + id     = (known after apply)
      + name   = "Proj-lambda-scale-up-policy"
      + policy = (known after apply)
      + role   = "Proj-action-scale-up-lambda-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.scale_up_logging will be created
  + resource "aws_iam_role_policy" "scale_up_logging" {
      + id     = (known after apply)
      + name   = "Proj-lambda-logging"
      + policy = (known after apply)
      + role   = "Proj-action-scale-up-lambda-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.service_linked_role[0] will be created
  + resource "aws_iam_role_policy" "service_linked_role" {
      + id     = (known after apply)
      + name   = "Proj-service_linked_role"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "iam:CreateServiceLinkedRole"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:iam::*:role/aws-service-role/*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-action-scale-up-lambda-role"
    }

  # module.runners.module.runners.aws_iam_role_policy.ssm_parameters will be created
  + resource "aws_iam_role_policy" "ssm_parameters" {
      + id     = (known after apply)
      + name   = "runner-ssm-parameters"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ssm:DeleteParameter",
                          + "ssm:GetParameters",
                          + "ssm:GetParameter",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:ssm:eu-west-1:287871436243:parameter/github-action-runners/Proj/runners/tokens*"
                    },
                  + {
                      + Action   = [
                          + "ssm:GetParameter",
                          + "ssm:GetParameters",
                          + "ssm:GetParametersByPath",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:ssm:eu-west-1:287871436243:parameter/github-action-runners/Proj/runners/config",
                          + "arn:aws:ssm:eu-west-1:287871436243:parameter/github-action-runners/Proj/runners/config/*",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-runner-role"
    }

  # module.runners.module.runners.aws_lambda_event_source_mapping.scale_up will be created
  + resource "aws_lambda_event_source_mapping" "scale_up" {
      + batch_size                    = 1
      + enabled                       = true
      + event_source_arn              = "arn:aws:sqs:eu-west-1:287871436243:Proj-queued-builds"
      + function_arn                  = (known after apply)
      + function_name                 = (known after apply)
      + id                            = (known after apply)
      + last_modified                 = (known after apply)
      + last_processing_result        = (known after apply)
      + maximum_record_age_in_seconds = (known after apply)
      + maximum_retry_attempts        = (known after apply)
      + parallelization_factor        = (known after apply)
      + state                         = (known after apply)
      + state_transition_reason       = (known after apply)
      + uuid                          = (known after apply)
    }

  # module.runners.module.runners.aws_lambda_function.scale_down will be created
  + resource "aws_lambda_function" "scale_down" {
      + architectures                  = [
          + "arm64",
        ]
      + arn                            = (known after apply)
      + filename                       = "lambdas/runners.zip"
      + function_name                  = "Proj-scale-down"
      + handler                        = "index.scaleDownHandler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "nodejs18.x"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "Fd5e4zr3eTBLCMvRRL5JCqsoAmsf3YAHfHuwm8ltgqk="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + tags_all                       = {
          + "Example"             = "ubuntu"
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + timeout                        = 60
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "ENVIRONMENT"                          = "Proj"
              + "LOG_LEVEL"                            = "info"
              + "MINIMUM_RUNNING_TIME_IN_MINUTES"      = "5"
              + "NODE_TLS_REJECT_UNAUTHORIZED"         = "1"
              + "PARAMETER_GITHUB_APP_ID_NAME"         = "/github-action-runners/Proj/app/github_app_id"
              + "PARAMETER_GITHUB_APP_KEY_BASE64_NAME" = "/github-action-runners/Proj/app/github_app_key_base64"
              + "POWERTOOLS_LOGGER_LOG_EVENT"          = "false"
              + "RUNNER_BOOT_TIME_IN_MINUTES"          = "5"
              + "SCALE_DOWN_CONFIG"                    = jsonencode([])
              + "SERVICE_NAME"                         = "runners-scale-up"
            }
        }

      + vpc_config {
          + vpc_id = (known after apply)
        }
    }

  # module.runners.module.runners.aws_lambda_function.scale_up will be created
  + resource "aws_lambda_function" "scale_up" {
      + architectures                  = [
          + "arm64",
        ]
      + arn                            = (known after apply)
      + filename                       = "lambdas/runners.zip"
      + function_name                  = "Proj-scale-up"
      + handler                        = "index.scaleUpHandler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 512
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = 1
      + role                           = (known after apply)
      + runtime                        = "nodejs18.x"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "Fd5e4zr3eTBLCMvRRL5JCqsoAmsf3YAHfHuwm8ltgqk="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + tags_all                       = {
          + "Example"             = "ubuntu"
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "DISABLE_RUNNER_AUTOUPDATE"            = "false"
              + "ENABLE_EPHEMERAL_RUNNERS"             = "false"
              + "ENABLE_JOB_QUEUED_CHECK"              = "true"
              + "ENABLE_ORGANIZATION_RUNNERS"          = "false"
              + "ENVIRONMENT"                          = "Proj"
              + "INSTANCE_ALLOCATION_STRATEGY"         = "lowest-price"
              + "INSTANCE_TARGET_CAPACITY_TYPE"        = "spot"
              + "INSTANCE_TYPES"                       = "m5.large,c5.large"
              + "LAUNCH_TEMPLATE_NAME"                 = "Proj-action-runner"
              + "LOG_LEVEL"                            = "info"
              + "MINIMUM_RUNNING_TIME_IN_MINUTES"      = "5"
              + "NODE_TLS_REJECT_UNAUTHORIZED"         = "1"
              + "PARAMETER_GITHUB_APP_ID_NAME"         = "/github-action-runners/Proj/app/github_app_id"
              + "PARAMETER_GITHUB_APP_KEY_BASE64_NAME" = "/github-action-runners/Proj/app/github_app_key_base64"
              + "POWERTOOLS_LOGGER_LOG_EVENT"          = "false"
              + "RUNNERS_MAXIMUM_COUNT"                = "3"
              + "RUNNER_EXTRA_LABELS"                  = "default,example"
              + "RUNNER_GROUP_NAME"                    = "Default"
              + "RUNNER_NAME_PREFIX"                   = ""
              + "SERVICE_NAME"                         = "runners-scale-up"
              + "SSM_TOKEN_PATH"                       = "/github-action-runners/Proj/runners/tokens"
              + "SUBNET_IDS"                           = ""
            }
        }

      + vpc_config {
          + vpc_id = (known after apply)
        }
    }

  # module.runners.module.runners.aws_lambda_permission.scale_down will be created
  + resource "aws_lambda_permission" "scale_down" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "Proj-scale-down"
      + id                  = (known after apply)
      + principal           = "events.amazonaws.com"
      + source_arn          = "arn:aws:events:eu-west-1:287871436243:rule/Proj-scale-down-rule"
      + statement_id        = "AllowExecutionFromCloudWatch"
      + statement_id_prefix = (known after apply)
    }

  # module.runners.module.runners.aws_lambda_permission.scale_runners_lambda will be created
  + resource "aws_lambda_permission" "scale_runners_lambda" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "Proj-scale-up"
      + id                  = (known after apply)
      + principal           = "sqs.amazonaws.com"
      + source_arn          = "arn:aws:sqs:eu-west-1:287871436243:Proj-queued-builds"
      + statement_id        = "AllowExecutionFromSQS"
      + statement_id_prefix = (known after apply)
    }

  # module.runners.module.runners.aws_launch_template.runner will be created
  + resource "aws_launch_template" "runner" {
      + arn                                  = (known after apply)
      + default_version                      = (known after apply)
      + id                                   = (known after apply)
      + image_id                             = "ami-09b0d7d31ba756f46"
      + instance_initiated_shutdown_behavior = "terminate"
      + latest_version                       = (known after apply)
      + name                                 = "Proj-action-runner"
      + name_prefix                          = (known after apply)
      + tags                                 = {
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + tags_all                             = {
          + "Example"             = "ubuntu"
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + update_default_version               = true
      + user_data                            = ""
      + vpc_security_group_ids               = (known after apply)

      + block_device_mappings {
          + device_name = "/dev/sda1"

          + ebs {
              + delete_on_termination = "true"
              + encrypted             = "true"
              + iops                  = (known after apply)
              + throughput            = (known after apply)
              + volume_size           = 30
              + volume_type           = "gp3"
            }
        }

      + iam_instance_profile {
          + name = "Proj-runner-profile"
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_protocol_ipv6          = "disabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "optional"
          + instance_metadata_tags      = "enabled"
        }

      + monitoring {
          + enabled = false
        }

      + tag_specifications {
          + resource_type = "instance"
          + tags          = {
              + "Name"                   = "Proj-action-runner"
              + "Project"                = "ProjectX"
              + "ghr:environment"        = "Proj"
              + "ghr:runner_name_prefix" = ""
              + "ghr:ssm_config_path"    = "/github-action-runners/Proj/runners/config"
            }
        }
      + tag_specifications {
          + resource_type = "volume"
          + tags          = {
              + "Name"                   = "Proj-action-runner"
              + "Project"                = "ProjectX"
              + "ghr:environment"        = "Proj"
              + "ghr:runner_name_prefix" = ""
              + "ghr:ssm_config_path"    = "/github-action-runners/Proj/runners/config"
            }
        }
    }

  # module.runners.module.runners.aws_security_group.runner_sg[0] will be created
  + resource "aws_security_group" "runner_sg" {
      + arn                    = (known after apply)
      + description            = "Github Actions Runner security group"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "Proj-github-actions-runner-sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + tags_all               = {
          + "Example"             = "ubuntu"
          + "Name"                = "Proj-action-runner"
          + "Project"             = "ProjectX"
          + "ghr:environment"     = "Proj"
          + "ghr:ssm_config_path" = "/github-action-runners/Proj/runners/config"
        }
      + vpc_id                 = (known after apply)
    }

  # module.runners.module.webhook.aws_apigatewayv2_integration.webhook will be created
  + resource "aws_apigatewayv2_integration" "webhook" {
      + api_id                                    = "donq2nufe4"
      + connection_type                           = "INTERNET"
      + description                               = "GitHub App webhook for receiving build events."
      + id                                        = (known after apply)
      + integration_method                        = "POST"
      + integration_response_selection_expression = (known after apply)
      + integration_type                          = "AWS_PROXY"
      + integration_uri                           = (known after apply)
      + payload_format_version                    = "1.0"
      + timeout_milliseconds                      = (known after apply)
    }

  # module.runners.module.webhook.aws_apigatewayv2_route.webhook will be created
  + resource "aws_apigatewayv2_route" "webhook" {
      + api_id             = "donq2nufe4"
      + api_key_required   = false
      + authorization_type = "NONE"
      + id                 = (known after apply)
      + route_key          = "POST /webhook"
      + target             = (known after apply)
    }

  # module.runners.module.webhook.aws_cloudwatch_log_group.webhook will be created
  + resource "aws_cloudwatch_log_group" "webhook" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/aws/lambda/Proj-webhook"
      + name_prefix       = (known after apply)
      + retention_in_days = 180
      + skip_destroy      = false
      + tags              = {
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + tags_all          = {
          + "Example"         = "ubuntu"
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
    }

  # module.runners.module.webhook.aws_iam_role.webhook_lambda will be created
  + resource "aws_iam_role" "webhook_lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "Proj-action-webhook-lambda-role"
      + name_prefix           = (known after apply)
      + path                  = "/Proj/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + tags_all              = {
          + "Example"         = "ubuntu"
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + unique_id             = (known after apply)
    }

  # module.runners.module.webhook.aws_iam_role_policy.webhook_logging will be created
  + resource "aws_iam_role_policy" "webhook_logging" {
      + id     = (known after apply)
      + name   = "Proj-lambda-logging-policy"
      + policy = (known after apply)
      + role   = "Proj-action-webhook-lambda-role"
    }

  # module.runners.module.webhook.aws_iam_role_policy.webhook_sqs will be created
  + resource "aws_iam_role_policy" "webhook_sqs" {
      + id     = (known after apply)
      + name   = "Proj-lambda-webhook-publish-sqs-policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "sqs:SendMessage",
                          + "sqs:GetQueueAttributes",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:sqs:eu-west-1:287871436243:Proj-queued-builds",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-action-webhook-lambda-role"
    }

  # module.runners.module.webhook.aws_iam_role_policy.webhook_ssm will be created
  + resource "aws_iam_role_policy" "webhook_ssm" {
      + id     = (known after apply)
      + name   = "Proj-lambda-webhook-publish-ssm-policy"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ssm:GetParameter",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:ssm:eu-west-1:287871436243:parameter/github-action-runners/Proj/app/github_app_webhook_secret",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = "Proj-action-webhook-lambda-role"
    }

  # module.runners.module.webhook.aws_lambda_function.webhook will be created
  + resource "aws_lambda_function" "webhook" {
      + architectures                  = [
          + "arm64",
        ]
      + arn                            = (known after apply)
      + filename                       = "lambdas/webhook.zip"
      + function_name                  = "Proj-webhook"
      + handler                        = "index.githubWebhook"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "nodejs18.x"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "EF96SROrgjC9rrBM9YTS4b+PsnqLf0Gp2Ur8xvLK0TI="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + tags_all                       = {
          + "Example"         = "ubuntu"
          + "Project"         = "ProjectX"
          + "ghr:environment" = "Proj"
        }
      + timeout                        = 10
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "ENVIRONMENT"                         = "Proj"
              + "LOG_LEVEL"                           = "info"
              + "PARAMETER_GITHUB_APP_WEBHOOK_SECRET" = "/github-action-runners/Proj/app/github_app_webhook_secret"
              + "POWERTOOLS_LOGGER_LOG_EVENT"         = "false"
              + "REPOSITORY_WHITE_LIST"               = jsonencode([])
              + "RUNNER_CONFIG"                       = jsonencode(
                    [
                      + {
                          + arn           = "arn:aws:sqs:eu-west-1:287871436243:Proj-queued-builds"
                          + fifo          = false
                          + id            = "https://sqs.eu-west-1.amazonaws.com/287871436243/Proj-queued-builds"
                          + matcherConfig = {
                              + exactMatch    = true
                              + labelMatchers = [
                                  + [
                                      + "self-hosted",
                                      + "linux",
                                      + "x64",
                                      + "default",
                                      + "example",
                                    ],
                                ]
                            }
                        },
                    ]
                )
              + "SQS_WORKFLOW_JOB_QUEUE"              = ""
            }
        }

      + vpc_config {
          + vpc_id = (known after apply)
        }
    }

  # module.runners.module.webhook.aws_lambda_permission.webhook will be created
  + resource "aws_lambda_permission" "webhook" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "Proj-webhook"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = "arn:aws:execute-api:eu-west-1:287871436243:donq2nufe4/*/*/webhook"
      + statement_id        = "AllowExecutionFromAPIGateway"
      + statement_id_prefix = (known after apply)
    }

Plan: 44 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + webhook_endpoint = "https://donq2nufe4.execute-api.eu-west-1.amazonaws.com/webhook"

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
